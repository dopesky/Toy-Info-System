package com.strathmore.projectds.gui;

import com.strathmore.projectds.client.SocketClient;
import com.strathmore.projectds.server.SocketServer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class App {
    private JPanel panelMain;
    private JLabel labelHeader;
    private JPanel panelInput;
    private JLabel labelClientInput;
    private JTextField fieldClientInput;
    private JButton buttonClientInput;
    private JPanel panelButton;
    private JLabel labelError;
    private JTextArea areaContent;
    private JScrollPane scrollArea;
    private JLabel labelServerOutput;

    public App() {
        fieldClientInput.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) buttonClientInput.doClick();
            }
        });
        new Thread(() -> new SocketServer().start()).start();
        new Thread(() -> new SocketClient().start(areaContent, labelError, buttonClientInput, fieldClientInput, labelServerOutput)).start();
    }

    public static void main(String[] args) {
        SocketServer.setLookAndFeel();
        JFrame mainFrame = new JFrame("Distributed Systems Project");
        App app = new App();
        mainFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        mainFrame.setResizable(false);
        mainFrame.setContentPane(app.panelMain);
        mainFrame.pack();
        mainFrame.setLocationRelativeTo(null);
        mainFrame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 1, new Insets(20, 20, 20, 20), 0, 20));
        labelHeader = new JLabel();
        Font labelHeaderFont = this.$$$getFont$$$("Verdana", Font.BOLD, 28, labelHeader.getFont());
        if (labelHeaderFont != null) labelHeader.setFont(labelHeaderFont);
        labelHeader.setText("Client-Server Communication Using Java Sockets");
        panelMain.add(labelHeader, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelInput = new JPanel();
        panelInput.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), 20, -1));
        panelMain.add(panelInput, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelClientInput = new JLabel();
        Font labelClientInputFont = this.$$$getFont$$$("Consolas", Font.BOLD, -1, labelClientInput.getFont());
        if (labelClientInputFont != null) labelClientInput.setFont(labelClientInputFont);
        labelClientInput.setText("CLIENT INPUT");
        panelInput.add(labelClientInput, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fieldClientInput = new JTextField();
        panelInput.add(fieldClientInput, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        panelButton = new JPanel();
        panelButton.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        panelMain.add(panelButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonClientInput = new JButton();
        Font buttonClientInputFont = this.$$$getFont$$$("Consolas", Font.BOLD, 16, buttonClientInput.getFont());
        if (buttonClientInputFont != null) buttonClientInput.setFont(buttonClientInputFont);
        buttonClientInput.setMargin(new Insets(5, 10, 0, 10));
        buttonClientInput.setText("SEND");
        panelButton.add(buttonClientInput);
        labelError = new JLabel();
        Font labelErrorFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 20, labelError.getFont());
        if (labelErrorFont != null) labelError.setFont(labelErrorFont);
        labelError.setForeground(new Color(-5433056));
        labelError.setText("");
        panelMain.add(labelError, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollArea = new JScrollPane();
        panelMain.add(scrollArea, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 200), null, 0, false));
        areaContent = new JTextArea();
        areaContent.setEditable(true);
        areaContent.setEnabled(false);
        areaContent.setFocusable(false);
        Font areaContentFont = this.$$$getFont$$$("Consolas", -1, 16, areaContent.getFont());
        if (areaContentFont != null) areaContent.setFont(areaContentFont);
        areaContent.setLineWrap(true);
        areaContent.setMargin(new Insets(20, 20, 20, 20));
        areaContent.setRows(0);
        areaContent.setWrapStyleWord(false);
        scrollArea.setViewportView(areaContent);
        labelServerOutput = new JLabel();
        Font labelServerOutputFont = this.$$$getFont$$$("Consolas", Font.BOLD, -1, labelServerOutput.getFont());
        if (labelServerOutputFont != null) labelServerOutput.setFont(labelServerOutputFont);
        labelServerOutput.setText("Output From Server Will Appear Here");
        panelMain.add(labelServerOutput, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelHeader.setLabelFor(fieldClientInput);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}
